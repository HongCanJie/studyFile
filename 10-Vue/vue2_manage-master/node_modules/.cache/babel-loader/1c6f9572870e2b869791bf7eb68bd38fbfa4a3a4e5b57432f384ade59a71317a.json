{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Mock from 'mockjs';\n// 引入cookie\nimport Cookie from 'js-cookie';\nimport { getMenu } from '../api';\nexport default {\n  data() {\n    var checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('年龄不能为空'));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error('请输入数字值'));\n        } else {\n          if (value < 18) {\n            callback(new Error('必须年满18岁'));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        username: '',\n        password: ''\n      },\n      rules: {\n        // 校验规则   失去焦点的时候触发\n        username: [{\n          required: true,\n          trigger: 'blur',\n          message: '请输入用户名'\n        }],\n        password: [{\n          required: true,\n          trigger: 'blur',\n          message: '请输入密码'\n        }]\n      }\n    };\n  },\n  methods: {\n    // 登录\n    submitForm() {\n      // Token信息\n      //   const token = Mock.Random.guid() // 生成一个随机数\n\n      //   Cookie.set('token', token)\n\n      //   this.$router.push('/home')  // 跳转到首页     -->  判断当前的token是否存在，如果没有登陆的话token就不存在 在main.js\n\n      // 判断校验通过\n      this.$refs.ruleForm.validate(valid => {\n        if (valid) {\n          getMenu(this.ruleForm).then(_ref => {\n            let {\n              data\n            } = _ref;\n            // 这的data是从permission里面的\n            console.log('data', data);\n            if (data.code === 20000) {\n              // 说明角色一登录成功\n              const token = data.data.token;\n              Cookie.set('token', token); // 利用cookie来保存token的信息,用于不同页面间的通信\n\n              //   获取菜单的数据，存入store中\n\n              this.$store.commit('setMenu', data.data.menu);\n              this.$store.commit('addMenu', this.$router);\n              this.$router.push('/home');\n            } else {\n              this.$alert('用户名或密码错误！', '登录失败', {\n                confirmButtonText: '确定',\n                callback: action => {\n                  this.$message({\n                    type: 'warning',\n                    message: `action: ${action}`\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["Mock","Cookie","getMenu","data","checkAge","rule","value","callback","Error","setTimeout","Number","isInteger","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","pass","username","password","rules","required","trigger","message","methods","submitForm","validate","valid","then","_ref","console","log","code","token","set","$store","commit","menu","$router","push","$alert","confirmButtonText","action","$message","type","resetForm","formName","resetFields"],"sources":["src/views/Login.vue"],"sourcesContent":["<template >\n  <!-- 卡片样式 -->\n  <el-card class=\"box-card\">\n    <div class=\"clearfix\">\n      <h3 class=\"login-title\">系统登录</h3>\n    </div>\n    <el-form :model=\"ruleForm\"\n             status-icon\n             :rules=\"rules\"\n             ref=\"ruleForm\"\n             label-width=\"80px\"\n             class=\"demo-ruleForm\">\n\n      <el-form-item label=\"用户名\"\n                    prop=\"username\">\n        <el-input type=\"text\"\n                  v-model=\"ruleForm.username\"\n                  placeholder=\"请输入用户名\"\n                  autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"密  码\"\n                    prop=\"password\">\n        <el-input type=\"password\"\n                  v-model=\"ruleForm.password\"\n                  placeholder=\"请输入密码\"\n                  autocomplete=\"off\"></el-input>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button type=\"primary\"\n                   style=\"margin-left: 50px;\"\n                   @click=\"submitForm('ruleForm')\">登录</el-button>\n        <el-button @click=\"resetForm('ruleForm')\"\n                   style=\"margin-left: 45px;\">重置</el-button>\n      </el-form-item>\n    </el-form>\n  </el-card>\n\n</template>\n\n<script>\nimport Mock from 'mockjs'\n// 引入cookie\nimport Cookie from 'js-cookie'\nimport { getMenu } from '../api'\nexport default {\n  data () {\n    var checkAge = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('年龄不能为空'));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error('请输入数字值'));\n        } else {\n          if (value < 18) {\n            callback(new Error('必须年满18岁'));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        username: '',\n        password: '',\n      },\n      rules: {\n        // 校验规则   失去焦点的时候触发\n        username: [\n          { required: true, trigger: 'blur', message: '请输入用户名' }\n        ],\n        password: [\n          { required: true, trigger: 'blur', message: '请输入密码' }\n        ],\n\n      }\n    };\n  },\n  methods: {\n    // 登录\n    submitForm () {\n      // Token信息\n      //   const token = Mock.Random.guid() // 生成一个随机数\n\n      //   Cookie.set('token', token)\n\n      //   this.$router.push('/home')  // 跳转到首页     -->  判断当前的token是否存在，如果没有登陆的话token就不存在 在main.js\n\n      // 判断校验通过\n      this.$refs.ruleForm.validate((valid) => {\n        if (valid) {\n          getMenu(this.ruleForm).then(({ data }) => {  // 这的data是从permission里面的\n            console.log('data', data);\n            if (data.code === 20000) { // 说明角色一登录成功\n              const token = data.data.token\n              Cookie.set('token', token)// 利用cookie来保存token的信息,用于不同页面间的通信\n\n              //   获取菜单的数据，存入store中\n\n              this.$store.commit('setMenu', data.data.menu)\n              this.$store.commit('addMenu', this.$router)\n              this.$router.push('/home')\n            } else {\n\n\n              this.$alert('用户名或密码错误！', '登录失败', {\n                confirmButtonText: '确定',\n                callback: action => {\n                  this.$message({\n                    type: 'warning',\n                    message: `action: ${action}`\n                  });\n                }\n              });\n\n            }\n          })\n        }\n      })\n\n\n    },\n    resetForm (formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.text {\n  font-size: 14px;\n}\n\n.item {\n  margin-bottom: 18px;\n}\n\n.clearfix:before,\n.clearfix:after {\n  display: table;\n  content: '';\n}\n.clearfix:after {\n  clear: both;\n}\n\n.box-card {\n  width: 480px;\n  margin: 200px auto;\n  border-radius: 3%;\n  /deep/.el-input__inner {\n    margin-left: 10px;\n    width: 85%;\n  }\n}\n.login-title {\n  color: #606266;\n  height: 46px;\n  line-height: 46px;\n  text-align: center;\n}\n</style>\n\n<!-- 1. 权限管理 -->\n<!-- 2. 不同角色看到的内容也不一样 -->\n<!--通过 Token 判断系统是否合法  进行权限判断-->"],"mappings":";AAyCA,OAAAA,IAAA;AACA;AACA,OAAAC,MAAA;AACA,SAAAC,OAAA;AACA;EACAC,KAAA;IACA,IAAAC,QAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;MACAC,UAAA;QACA,KAAAC,MAAA,CAAAC,SAAA,CAAAL,KAAA;UACAC,QAAA,KAAAC,KAAA;QACA;UACA,IAAAF,KAAA;YACAC,QAAA,KAAAC,KAAA;UACA;YACAD,QAAA;UACA;QACA;MACA;IACA;IACA,IAAAK,YAAA,GAAAA,CAAAP,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAK,QAAA,CAAAC,SAAA;UACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACA;QACAT,QAAA;MACA;IACA;IACA,IAAAU,aAAA,GAAAA,CAAAZ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAO,QAAA,CAAAK,IAAA;QACAX,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAM,QAAA;QACAM,QAAA;QACAC,QAAA;MACA;MACAC,KAAA;QACA;QACAF,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,QAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAGA;IACA;EACA;EACAC,OAAA;IACA;IACAC,WAAA;MACA;MACA;;MAEA;;MAEA;;MAEA;MACA,KAAAX,KAAA,CAAAF,QAAA,CAAAc,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA1B,OAAA,MAAAW,QAAA,EAAAgB,IAAA,CAAAC,IAAA;YAAA;cAAA3B;YAAA,IAAA2B,IAAA;YAAA;YACAC,OAAA,CAAAC,GAAA,SAAA7B,IAAA;YACA,IAAAA,IAAA,CAAA8B,IAAA;cAAA;cACA,MAAAC,KAAA,GAAA/B,IAAA,CAAAA,IAAA,CAAA+B,KAAA;cACAjC,MAAA,CAAAkC,GAAA,UAAAD,KAAA;;cAEA;;cAEA,KAAAE,MAAA,CAAAC,MAAA,YAAAlC,IAAA,CAAAA,IAAA,CAAAmC,IAAA;cACA,KAAAF,MAAA,CAAAC,MAAA,iBAAAE,OAAA;cACA,KAAAA,OAAA,CAAAC,IAAA;YACA;cAGA,KAAAC,MAAA;gBACAC,iBAAA;gBACAnC,QAAA,EAAAoC,MAAA;kBACA,KAAAC,QAAA;oBACAC,IAAA;oBACArB,OAAA,aAAAmB,MAAA;kBACA;gBACA;cACA;YAEA;UACA;QACA;MACA;IAGA;IACAG,UAAAC,QAAA;MACA,KAAAhC,KAAA,CAAAgC,QAAA,EAAAC,WAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}