{"ast":null,"code":"// 引入api接口addUser delUser\nimport { getUser, addUser, editUser, delUser } from '../api';\nexport default {\n  data() {\n    return {\n      // 新增和编辑共用一个对话框，当点击确定的时候需要判断是新增用户还是编辑用户\n      modelType: 0,\n      // 0表示新增的弹窗，1表示编辑\n      formLabelWidth: '80px',\n      dialogFormVisible: false,\n      //   定义表单中含有的字段\n      form: {\n        name: '',\n        age: '',\n        sex: '',\n        birth: '',\n        addr: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入姓名'\n        }],\n        age: [{\n          required: true,\n          message: '请输入年龄'\n        }],\n        sex: [{\n          required: true,\n          message: '请选择性别'\n        }],\n        birth: [{\n          required: true,\n          message: '请选择日期'\n        }],\n        addr: [{\n          required: false,\n          message: '请输入地址'\n        }]\n      },\n      //  表格： 使用Mock模拟后端API接口，新建user.js存放模拟数据，在mock.js中添加了后端的操作之后，还需要在index.js中定义前端相关的API\n      tableData: [],\n      total: 0,\n      // 总条数默认为0， 长度为表单长度\n      //   用于分页 page是当前的页面，limit是当前页显示的条数\n      pageData: {\n        page: 1,\n        limit: 10\n      },\n      userForm: {\n        // 通过name属性判断\n        name: ''\n      }\n    };\n  },\n  methods: {\n    // 提交用户表单\n    submit() {\n      // this.$refs[\"form\"]等同于this.$refs.form\n      this.$refs.form.validate(valid => {\n        console.log(valid, 'valid');\n        // 当表单校验通过时，后续对表单的处理\n        if (valid) {\n          console.log(this.form, 'from');\n          //   点击确定时需要判断执行的操作是新增还是编辑\n          if (this.modelType === 0) {\n            // 新增 调用新增API接口\n            // 把表单的数据加入  先调用新增的接口插入数据在调用获取列表的接口更新数据，获取列表的接口应该设成公共的接口\n            addUser(this.form).then(() => {\n              // 重新获取列表的接口\n              this.getList();\n            });\n          } else {\n            // 编辑  调用编辑API接口\n            editUser(this.form).then(() => {\n              this.getList(); // 重新获取列表的接口\n            });\n          }\n\n          this.$refs[\"form\"].resetFields(); //   重置信息\n          this.dialogFormVisible = false; //   填写成功后关闭弹窗\n        }\n      });\n    },\n\n    // 关闭弹窗前的确认操作\n    handleClose() {\n      console.log(this.form);\n      this.$confirm('确认关闭？').then(_ => {\n        this.$refs[\"form\"].resetFields();\n        this.dialogFormVisible = false;\n        done();\n      }).catch(_ => {});\n    },\n    // 点击取消的操作\n    cancle() {\n      this.$refs.form.resetFields();\n      this.dialogFormVisible = false;\n    },\n    // 表格的删除编辑操作等\n    handleEdit(row) {\n      this.modelType = 1;\n      this.dialogFormVisible = true;\n      //   注意此处不能直接把row给form表单，要通过深拷贝赋值，把这个对象数据拷贝到一个全新的对象，修改数据的时候不会改变原来对象的数据\n      //   this.form = row\n      this.form = JSON.parse(JSON.stringify(row));\n    },\n    // 删除操作  点击删除出现一个提示框messagebox\n    handleDelete(row) {\n      this.$confirm('此操作将删除该记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 调用删除接口  传进去的是一个对象  \n        delUser({\n          id: row.id\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n          //   删除成功后重新获取列表的接口\n          this.getList();\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // 获取列表的数据\n    getList() {\n      // 获取列表数据 \n      //   getUser({ params: this.pageData }).then(({ data }) => {\n\n      // 因为有查询的操作，所以返回的不仅是列表内容，还得有查询的内容，所以是他们对象的合集了\n      getUser({\n        params: {\n          ...this.userForm,\n          ...this.pageData\n        }\n      }).then(_ref => {\n        let {\n          data\n        } = _ref;\n        console.log(data, 'data');\n        this.tableData = data.list;\n        // 如果存在则为实际长度，如果不存在则为0\n        this.total = data.count || 0;\n        console.log(this.total, 'total');\n      });\n    },\n    handleAdd() {\n      // 新增按钮\n      this.modelType = 0;\n      this.dialogFormVisible = true;\n      //   this.$refs[\"form\"].resetFields()  //   重置信息\n    },\n\n    // 选择页码的回调函数\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`);\n      this.pageData.page = val;\n      this.getList();\n    },\n    // 列表的查询\n    onSearch() {\n      this.getList();\n    }\n  },\n  //   生命周期\n  mounted() {\n    this.getList();\n  }\n};","map":{"version":3,"names":["getUser","addUser","editUser","delUser","data","modelType","formLabelWidth","dialogFormVisible","form","name","age","sex","birth","addr","rules","required","message","tableData","total","pageData","page","limit","userForm","methods","submit","$refs","validate","valid","console","log","then","getList","resetFields","handleClose","$confirm","_","done","catch","cancle","handleEdit","row","JSON","parse","stringify","handleDelete","confirmButtonText","cancelButtonText","type","id","$message","params","_ref","list","count","handleAdd","handleCurrentChange","val","onSearch","mounted"],"sources":["src/views/User.vue"],"sourcesContent":["<template>\n  <div class=\"manage\">\n    <div class=\"manage-add-search\">\n      <el-button type=\"primary\"\n                 @click=\"handleAdd\"\n                 style=\"margin-top: 10px;\">+ 新增</el-button>\n      <!-- 用户的表单信息 -->\n      <el-dialog title=\"新增用户\"\n                 width=\"30%\"\n                 :before-close=\"handleClose\"\n                 :visible.sync=\"dialogFormVisible\">\n        <!-- 这里的form对应data里面的form,对应表单域字段         el-input输入框-->\n        <!-- :inline=\"true\" 一行显示两个value-format设置日期显示格式 -->\n        <!-- 通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可\n\t\tVue 为简化DOM获取方法提出了ref 属性和$refs 对象。一般的操作流程是:ref 绑定控件，$refs 获取控件 -->\n        <el-form ref=\"form\"\n                 :inline=\"true\"\n                 :rules=\"rules\"\n                 :model=\"form\">\n          <el-form-item label=\"姓名\"\n                        prop=\"name\"\n                        :label-width=\"formLabelWidth\">\n            <el-input v-model=\"form.name\"\n                      placeholder=\"请输入姓名\"\n                      autocomplete=\"off\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"年龄\"\n                        prop=\"age\"\n                        :label-width=\"formLabelWidth\">\n            <el-input v-model=\"form.age\"\n                      placeholder=\"请输入年龄\"\n                      autocomplete=\"off\"></el-input>\n          </el-form-item>\n\n          <el-form-item label=\"性别\"\n                        prop=\"sex\"\n                        :label-width=\"formLabelWidth\">\n            <el-select v-model=\"form.sex\"\n                       placeholder=\"请选择\">\n              <el-option label=\"男\"\n                         :value=\"1\"></el-option>\n              <el-option label=\"女\"\n                         :value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"出生日期\"\n                        prop=\"birth\"\n                        :label-width=\"formLabelWidth\">\n            <el-date-picker v-model=\"form.birth\"\n                            type=\"date\"\n                            value-format=\"yyyy-MM-dd\"\n                            placeholder=\"选择日期\">\n            </el-date-picker>\n          </el-form-item>\n          <el-form-item label=\"地址\"\n                        prop=\"addr\"\n                        :label-width=\"formLabelWidth\">\n            <el-input v-model=\"form.addr\"\n                      placeholder=\"请输入地址\"\n                      autocomplete=\"off\"></el-input>\n          </el-form-item>\n\n        </el-form>\n        <div slot=\"footer\"\n             class=\"dialog-footer\">\n          <el-button @click=\"cancle\">取 消</el-button>\n          <el-button type=\"primary\"\n                     @click=\"submit\">确 定</el-button>\n        </div>\n      </el-dialog>\n\n      <!-- 搜索框 -->\n      <el-form ref=\"userForm\"\n               :inline=\"true\"\n               :rules=\"rules\"\n               :model=\"userForm\"\n               style=\"display:flex\">\n        <el-form-item>\n          <el-input v-model=\"userForm.name\"\n                    placeholder=\"输入搜索内容\"\n                    autocomplete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\"\n                     @click=\"onSearch\">搜索</el-button>\n        </el-form-item>\n\n      </el-form>\n    </div>\n    <!-- 表格区域 -->\n    <!-- el-table有height属性  cal(100% - 62px)动态计算高度 -->\n    <el-table :data=\"tableData\"\n              stripe=\"true\"\n              height='52%'\n              style=\"width: 100%;\">\n      <el-table-column prop=\"name\"\n                       label=\"姓名\"\n                       width=\"auto\">\n      </el-table-column>\n      <el-table-column prop=\"age\"\n                       label=\"年龄\"\n                       width=\"auto\">\n      </el-table-column>\n      <el-table-column prop=\"sex\"\n                       label=\"性别\"\n                       width=\"auto\">\n        <template slot-scope=\"scope\">\n          <!-- slot-scope=\"scope\"：作用域插槽；scope.row表示那行数据对象 -->\n          <span>{{ scope.row.sex == 1? ' 男':'女' }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"birth\"\n                       label=\"出生日期\"\n                       width=\"auto\">\n      </el-table-column>\n      <el-table-column prop=\"addr\"\n                       label=\"地址\"\n                       width=\"auto\">\n      </el-table-column>\n      <el-table-column label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\"\n                     @click=\"handleEdit(scope.row)\">编辑</el-button>\n          <el-button size=\"mini\"\n                     type=\"danger\"\n                     @click=\"handleDelete( scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- 属性用:绑定，事件用@绑定 -->\n    <el-pagination @current-change=\"handleCurrentChange\"\n                   layout=\"prev, pager, next\"\n                   :total=\"total\">\n    </el-pagination>\n  </div>\n\n</template>\n\n\n<script>\n// 引入api接口addUser delUser\nimport { getUser, addUser, editUser, delUser } from '../api'\n\nexport default {\n  data () {\n    return {\n      // 新增和编辑共用一个对话框，当点击确定的时候需要判断是新增用户还是编辑用户\n      modelType: 0, // 0表示新增的弹窗，1表示编辑\n      formLabelWidth: '80px',\n      dialogFormVisible: false,\n      //   定义表单中含有的字段\n      form: {\n        name: '',\n        age: '',\n        sex: '',\n        birth: '',\n        addr: '',\n      },\n      rules: {\n        name: [\n          { required: true, message: '请输入姓名' }\n        ],\n        age:\n          [\n            { required: true, message: '请输入年龄' }\n          ],\n        sex: [\n          { required: true, message: '请选择性别' }\n        ],\n        birth: [\n          { required: true, message: '请选择日期' }\n        ],\n        addr: [\n          { required: false, message: '请输入地址' }\n        ],\n      },\n      //  表格： 使用Mock模拟后端API接口，新建user.js存放模拟数据，在mock.js中添加了后端的操作之后，还需要在index.js中定义前端相关的API\n      tableData: [],\n      total: 0, // 总条数默认为0， 长度为表单长度\n      //   用于分页 page是当前的页面，limit是当前页显示的条数\n      pageData: {\n        page: 1,\n        limit: 10\n      },\n      userForm: {\n        // 通过name属性判断\n        name: '',\n      },\n\n\n\n\n\n    };\n  },\n  methods: {\n    // 提交用户表单\n    submit () {\n      // this.$refs[\"form\"]等同于this.$refs.form\n      this.$refs.form.validate((valid) => {\n        console.log(valid, 'valid');\n        // 当表单校验通过时，后续对表单的处理\n        if (valid) {\n          console.log(this.form, 'from');\n          //   点击确定时需要判断执行的操作是新增还是编辑\n          if (this.modelType === 0) { // 新增 调用新增API接口\n            // 把表单的数据加入  先调用新增的接口插入数据在调用获取列表的接口更新数据，获取列表的接口应该设成公共的接口\n            addUser(this.form).then(() => {\n              // 重新获取列表的接口\n              this.getList()\n            })\n\n          }\n          else { // 编辑  调用编辑API接口\n            editUser(this.form).then(() => {\n              this.getList()  // 重新获取列表的接口\n            })\n          }\n          this.$refs[\"form\"].resetFields()  //   重置信息\n          this.dialogFormVisible = false  //   填写成功后关闭弹窗\n\n        }\n      })\n    },\n    // 关闭弹窗前的确认操作\n    handleClose () {\n      console.log(this.form);\n      this.$confirm('确认关闭？')\n        .then(_ => {\n          this.$refs[\"form\"].resetFields()\n          this.dialogFormVisible = false\n          done();\n\n        })\n        .catch(_ => { });\n    },\n    // 点击取消的操作\n    cancle () {\n      this.$refs.form.resetFields()\n      this.dialogFormVisible = false\n\n    },\n    // 表格的删除编辑操作等\n    handleEdit (row) {\n      this.modelType = 1\n      this.dialogFormVisible = true\n      //   注意此处不能直接把row给form表单，要通过深拷贝赋值，把这个对象数据拷贝到一个全新的对象，修改数据的时候不会改变原来对象的数据\n      //   this.form = row\n      this.form = JSON.parse(JSON.stringify(row))\n\n    },\n    // 删除操作  点击删除出现一个提示框messagebox\n    handleDelete (row) {\n      this.$confirm('此操作将删除该记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 调用删除接口  传进去的是一个对象  \n        delUser({ id: row.id }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n          //   删除成功后重新获取列表的接口\n          this.getList()\n        })\n\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // 获取列表的数据\n    getList () {\n      // 获取列表数据 \n      //   getUser({ params: this.pageData }).then(({ data }) => {\n\n      // 因为有查询的操作，所以返回的不仅是列表内容，还得有查询的内容，所以是他们对象的合集了\n      getUser({ params: { ...this.userForm, ...this.pageData } }).then(({ data }) => {\n        console.log(data, 'data');\n        this.tableData = data.list\n        // 如果存在则为实际长度，如果不存在则为0\n        this.total = data.count || 0\n        console.log(this.total, 'total');\n      })\n    },\n    handleAdd () { // 新增按钮\n      this.modelType = 0\n      this.dialogFormVisible = true\n      //   this.$refs[\"form\"].resetFields()  //   重置信息\n    },\n    // 选择页码的回调函数\n    handleCurrentChange (val) {\n      console.log(`当前页: ${val}`);\n      this.pageData.page = val\n      this.getList()\n    },\n    // 列表的查询\n    onSearch () {\n      this.getList()\n    },\n  },\n  //   生命周期\n  mounted () {\n    this.getList()\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.manage {\n  height: 90%;\n  .manage-add-search {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    /deep/ .el-form-item__content {\n      width: 220px;\n      .el-select {\n        width: 220px;\n      }\n    }\n  }\n  .el-pagination {\n    margin-top: 20px;\n    float: right;\n  }\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}