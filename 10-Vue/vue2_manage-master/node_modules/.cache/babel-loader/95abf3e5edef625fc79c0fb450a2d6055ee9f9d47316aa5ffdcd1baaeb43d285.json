{"ast":null,"code":"// ### 登录权限\n// 我们给系统添加一个登录凭证叫\"token\"，这个token在登录的时候通过接口请求将用户名和密码传给后端，后端再数据库中匹配成功后返回一个凭证，前端将token缓存起来，再调用接口时传给后端验证就建立了登录权限校验\n\n// Mock数据 permission\n\nimport Mock from 'mockjs';\nexport default {\n  getMenu: config => {\n    const {\n      username,\n      password\n    } = JSON.parse(config.body);\n    // 先判断用户是否存在\n    // 判断账号和密码是否对应\n    if (username === 'admin' && password === 'admin') {\n      return {\n        code: 20000,\n        data: {\n          menu: [{\n            path: '/home',\n            name: 'home',\n            label: '首页',\n            icon: 's-home',\n            url: 'Home.vue'\n          }, {\n            path: '/mall',\n            name: 'mall',\n            label: '商品管理',\n            icon: 'video-play',\n            url: 'Mall.vue'\n          }, {\n            path: '/user',\n            name: 'user',\n            label: '用户管理',\n            icon: 'user',\n            url: 'User.vue'\n          }, {\n            label: '其他',\n            icon: 'location',\n            children: [{\n              path: '/page1',\n              name: 'page1',\n              label: '页面1',\n              icon: 'setting',\n              url: 'PageOne.vue'\n            }, {\n              path: '/page2',\n              name: 'page2',\n              label: '页面2',\n              icon: 'setting',\n              url: 'PageTwo.vue'\n            }]\n          }],\n          token: Mock.Random.guid(),\n          message: '获取成功'\n        }\n      };\n    } else if (username === 'xiaoxiao' && password === 'xiaoxiao') {\n      return {\n        code: 20000,\n        data: {\n          menu: [{\n            path: '/home',\n            name: 'home',\n            label: '首页',\n            icon: 's-home',\n            url: 'Home.vue'\n          }, {\n            path: '/video',\n            name: 'video',\n            label: '商品管理',\n            icon: 'video-play',\n            url: 'Mall.vue'\n          }],\n          token: Mock.Random.guid(),\n          message: '获取成功'\n        }\n      };\n    } else {\n      return {\n        code: -999,\n        data: {\n          message: '密码错误'\n        }\n      };\n    }\n  }\n};\n\n// 之后再mock.js中定义拦截的接口\n\n// 1.不同的账号登录，会有不同的菜单权限\n// 2.通过url输入地址来显示页面，根据所拥有的权限动态的添加路由\n// 3.对于菜单的数据在不同页面的数据通信  --->刷新之后菜单不见了？将数据存到store中。，当页面刷新后数据就不存在了，所以需要做一个缓存，利用cookie或storage作缓存\n\n// 跨页面跨组件可以用store","map":{"version":3,"names":["Mock","getMenu","config","username","password","JSON","parse","body","code","data","menu","path","name","label","icon","url","children","token","Random","guid","message"],"sources":["C:/Users/Administrator/Desktop/资料文档/前端开发/10-Vue/vue2_manage-master/src/api/mockServeData/permission.js"],"sourcesContent":["// ### 登录权限\n// 我们给系统添加一个登录凭证叫\"token\"，这个token在登录的时候通过接口请求将用户名和密码传给后端，后端再数据库中匹配成功后返回一个凭证，前端将token缓存起来，再调用接口时传给后端验证就建立了登录权限校验\n\n// Mock数据 permission\n\nimport Mock from 'mockjs'\nexport default {\n  getMenu: config => {\n    const { username, password } = JSON.parse(config.body)\n    // 先判断用户是否存在\n    // 判断账号和密码是否对应\n    if (username === 'admin' && password === 'admin') {\n      return {\n        code: 20000,\n        data: {\n          menu: [\n            {\n              path: '/home',\n              name: 'home',\n              label: '首页',\n              icon: 's-home',\n              url: 'Home.vue'\n            },\n            {\n              path: '/mall',\n              name: 'mall',\n              label: '商品管理',\n              icon: 'video-play',\n              url: 'Mall.vue'\n            },\n            {\n              path: '/user',\n              name: 'user',\n              label: '用户管理',\n              icon: 'user',\n              url: 'User.vue'\n            },\n            {\n              label: '其他',\n              icon: 'location',\n              children: [\n                {\n                  path: '/page1',\n                  name: 'page1',\n                  label: '页面1',\n                  icon: 'setting',\n                  url: 'PageOne.vue'\n                },\n                {\n                  path: '/page2',\n                  name: 'page2',\n                  label: '页面2',\n                  icon: 'setting',\n                  url: 'PageTwo.vue'\n                }\n              ]\n            }\n          ],\n          token: Mock.Random.guid(),\n          message: '获取成功'\n        }\n      }\n    } else if (username === 'xiaoxiao' && password === 'xiaoxiao') {\n      return {\n        code: 20000,\n        data: {\n          menu: [\n            {\n              path: '/home',\n              name: 'home',\n              label: '首页',\n              icon: 's-home',\n              url: 'Home.vue'\n            },\n            {\n              path: '/video',\n              name: 'video',\n              label: '商品管理',\n              icon: 'video-play',\n              url: 'Mall.vue'\n            }\n          ],\n          token: Mock.Random.guid(),\n          message: '获取成功'\n        }\n      }\n    } else {\n      return {\n        code: -999,\n        data: {\n          message: '密码错误'\n        }\n      }\n    }\n\n  }\n}\n\n// 之后再mock.js中定义拦截的接口\n\n// 1.不同的账号登录，会有不同的菜单权限\n// 2.通过url输入地址来显示页面，根据所拥有的权限动态的添加路由\n// 3.对于菜单的数据在不同页面的数据通信  --->刷新之后菜单不见了？将数据存到store中。，当页面刷新后数据就不存在了，所以需要做一个缓存，利用cookie或storage作缓存\n\n// 跨页面跨组件可以用store"],"mappings":"AAAA;AACA;;AAEA;;AAEA,OAAOA,IAAI,MAAM,QAAQ;AACzB,eAAe;EACbC,OAAO,EAAEC,MAAM,IAAI;IACjB,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAACK,IAAI,CAAC;IACtD;IACA;IACA,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,OAAO,EAAE;MAChD,OAAO;QACLI,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,IAAI,EAAE,CACJ;YACEC,IAAI,EAAE,OAAO;YACbC,IAAI,EAAE,MAAM;YACZC,KAAK,EAAE,IAAI;YACXC,IAAI,EAAE,QAAQ;YACdC,GAAG,EAAE;UACP,CAAC,EACD;YACEJ,IAAI,EAAE,OAAO;YACbC,IAAI,EAAE,MAAM;YACZC,KAAK,EAAE,MAAM;YACbC,IAAI,EAAE,YAAY;YAClBC,GAAG,EAAE;UACP,CAAC,EACD;YACEJ,IAAI,EAAE,OAAO;YACbC,IAAI,EAAE,MAAM;YACZC,KAAK,EAAE,MAAM;YACbC,IAAI,EAAE,MAAM;YACZC,GAAG,EAAE;UACP,CAAC,EACD;YACEF,KAAK,EAAE,IAAI;YACXC,IAAI,EAAE,UAAU;YAChBE,QAAQ,EAAE,CACR;cACEL,IAAI,EAAE,QAAQ;cACdC,IAAI,EAAE,OAAO;cACbC,KAAK,EAAE,KAAK;cACZC,IAAI,EAAE,SAAS;cACfC,GAAG,EAAE;YACP,CAAC,EACD;cACEJ,IAAI,EAAE,QAAQ;cACdC,IAAI,EAAE,OAAO;cACbC,KAAK,EAAE,KAAK;cACZC,IAAI,EAAE,SAAS;cACfC,GAAG,EAAE;YACP,CAAC;UAEL,CAAC,CACF;UACDE,KAAK,EAAEjB,IAAI,CAACkB,MAAM,CAACC,IAAI,CAAC,CAAC;UACzBC,OAAO,EAAE;QACX;MACF,CAAC;IACH,CAAC,MAAM,IAAIjB,QAAQ,KAAK,UAAU,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC7D,OAAO;QACLI,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,IAAI,EAAE,CACJ;YACEC,IAAI,EAAE,OAAO;YACbC,IAAI,EAAE,MAAM;YACZC,KAAK,EAAE,IAAI;YACXC,IAAI,EAAE,QAAQ;YACdC,GAAG,EAAE;UACP,CAAC,EACD;YACEJ,IAAI,EAAE,QAAQ;YACdC,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,MAAM;YACbC,IAAI,EAAE,YAAY;YAClBC,GAAG,EAAE;UACP,CAAC,CACF;UACDE,KAAK,EAAEjB,IAAI,CAACkB,MAAM,CAACC,IAAI,CAAC,CAAC;UACzBC,OAAO,EAAE;QACX;MACF,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLZ,IAAI,EAAE,CAAC,GAAG;QACVC,IAAI,EAAE;UACJW,OAAO,EAAE;QACX;MACF,CAAC;IACH;EAEF;AACF,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}